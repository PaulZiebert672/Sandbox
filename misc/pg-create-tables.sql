-- DROP SCHEMA public;

-- Drop table

-- DROP TABLE public.authors;

CREATE TABLE public.authors (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "name" varchar(255) NOT NULL,
    sort varchar(255) NULL,
    link varchar(255) NOT NULL DEFAULT ''::character varying,
    CONSTRAINT authors_name_key UNIQUE (name),
    CONSTRAINT authors_pkey PRIMARY KEY (id)
);


-- public.books definition

-- Drop table

-- DROP TABLE public.books;

CREATE TABLE public.books (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    title varchar(255) NOT NULL,
    sort varchar(255) NOT NULL,
    "timestamp" timestamp NULL DEFAULT now(),
    pubdate timestamp NULL DEFAULT now(),
    series_index numeric(8, 2) NULL DEFAULT 1,
    author_sort varchar(255) NULL,
    isbn varchar(255) NULL DEFAULT ''::character varying,
    lccn varchar(255) NULL DEFAULT ''::character varying,
    "path" varchar(255) NOT NULL DEFAULT ''::character varying,
    flags int4 NOT NULL DEFAULT 1,
    uuid varchar(255) NULL,
    has_cover bool NULL DEFAULT false,
    last_modified timestamp NOT NULL DEFAULT '2000-01-01 00:00:00'::timestamp without time zone,
    CONSTRAINT books_pkey PRIMARY KEY (id)
);
CREATE INDEX idx_books_author_sort ON public.books USING btree (author_sort);
CREATE INDEX idx_books_sort ON public.books USING btree (sort);


-- public.covers definition

-- Drop table

-- DROP TABLE public.covers;

CREATE TABLE public.covers (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    img oid NULL, -- book cover image
    CONSTRAINT covers_pkey PRIMARY KEY (id)
);

-- Column comments

COMMENT ON COLUMN public.covers.img IS 'book cover image';


-- public."data" definition

-- Drop table

-- DROP TABLE public."data";

CREATE TABLE public."data" (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    book int4 NOT NULL,
    format varchar(255) NOT NULL,
    uncompressed_size int4 NOT NULL,
    "name" varchar(255) NOT NULL,
    CONSTRAINT data_book_format_key UNIQUE (book, format),
    CONSTRAINT data_pkey PRIMARY KEY (id)
);
CREATE INDEX idx_data_book ON public.data USING btree (book);
CREATE INDEX idx_data_format ON public.data USING btree (format);


-- public.databasechangelog definition

-- Drop table

-- DROP TABLE public.databasechangelog;

CREATE TABLE public.databasechangelog (
    id varchar(255) NOT NULL,
    author varchar(255) NOT NULL,
    filename varchar(255) NOT NULL,
    dateexecuted timestamp NOT NULL,
    orderexecuted int4 NOT NULL,
    exectype varchar(10) NOT NULL,
    md5sum varchar(35) NULL,
    description varchar(255) NULL,
    "comments" varchar(255) NULL,
    tag varchar(255) NULL,
    liquibase varchar(20) NULL,
    contexts varchar(255) NULL,
    labels varchar(255) NULL,
    deployment_id varchar(10) NULL
);


-- public.databasechangeloglock definition

-- Drop table

-- DROP TABLE public.databasechangeloglock;

CREATE TABLE public.databasechangeloglock (
    id int4 NOT NULL,
    "locked" bool NOT NULL,
    lockgranted timestamp NULL,
    lockedby varchar(255) NULL,
    CONSTRAINT databasechangeloglock_pkey PRIMARY KEY (id)
);


-- public.identifiers definition

-- Drop table

-- DROP TABLE public.identifiers;

CREATE TABLE public.identifiers (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    book int4 NOT NULL,
    "type" varchar(255) NOT NULL DEFAULT 'isbn'::character varying,
    val varchar(255) NOT NULL,
    CONSTRAINT identifiers_book_type_key UNIQUE (book, type),
    CONSTRAINT identifiers_pkey PRIMARY KEY (id)
);


-- public.languages definition

-- Drop table

-- DROP TABLE public.languages;

CREATE TABLE public.languages (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    lang_code varchar(255) NOT NULL,
    CONSTRAINT languages_lang_code_key UNIQUE (lang_code),
    CONSTRAINT languages_pkey PRIMARY KEY (id)
);
CREATE INDEX idx_languages_lang_code ON public.languages USING btree (lang_code);


-- public.preferences definition

-- Drop table

-- DROP TABLE public.preferences;

CREATE TABLE public.preferences (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "key" varchar(255) NOT NULL,
    value varchar(255) NOT NULL,
    CONSTRAINT preferences_key_key UNIQUE (key),
    CONSTRAINT preferences_pkey PRIMARY KEY (id)
);


-- public.publishers definition

-- Drop table

-- DROP TABLE public.publishers;

CREATE TABLE public.publishers (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "name" varchar(255) NOT NULL,
    sort varchar(255) NULL,
    CONSTRAINT publishers_name_key UNIQUE (name),
    CONSTRAINT publishers_pkey PRIMARY KEY (id)
);
CREATE INDEX idx_publishers_name ON public.publishers USING btree (name);


-- public.ratings definition

-- Drop table

-- DROP TABLE public.ratings;

CREATE TABLE public.ratings (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    rating int4 NULL,
    CONSTRAINT ratings_pkey PRIMARY KEY (id),
    CONSTRAINT ratings_rating_key UNIQUE (rating)
);


-- public.roles definition

-- Drop table

-- DROP TABLE public.roles;

CREATE TABLE public.roles (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "name" varchar(80) NOT NULL,
    created timestamp NULL,
    updated timestamp NULL,
    status varchar(24) NOT NULL DEFAULT 'ACTIVE'::character varying,
    CONSTRAINT roles_name_key UNIQUE (name),
    CONSTRAINT roles_pkey PRIMARY KEY (id)
);


-- public.series definition

-- Drop table

-- DROP TABLE public.series;

CREATE TABLE public.series (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "name" varchar(255) NOT NULL,
    sort varchar(255) NULL,
    CONSTRAINT series_name_key UNIQUE (name),
    CONSTRAINT series_pkey PRIMARY KEY (id)
);
CREATE INDEX idx_series_name ON public.series USING btree (name);


-- public.tags definition

-- Drop table

-- DROP TABLE public.tags;

CREATE TABLE public.tags (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "name" varchar(255) NOT NULL,
    CONSTRAINT tags_name_key UNIQUE (name),
    CONSTRAINT tags_pkey PRIMARY KEY (id)
);
CREATE INDEX idx_tags_name ON public.tags USING btree (name);


-- public.users definition

-- Drop table

-- DROP TABLE public.users;

CREATE TABLE public.users (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    username varchar(80) NOT NULL,
    email varchar(255) NOT NULL,
    "password" varchar(255) NOT NULL,
    created timestamp NULL,
    updated timestamp NULL,
    status varchar(25) NOT NULL DEFAULT 'ACTIVE'::character varying,
    CONSTRAINT users_email_key UNIQUE (email),
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_username_key UNIQUE (username)
);


-- public.books_authors_link definition

-- Drop table

-- DROP TABLE public.books_authors_link;

CREATE TABLE public.books_authors_link (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    book int4 NOT NULL,
    author int4 NOT NULL,
    CONSTRAINT books_authors_link_book_author_key UNIQUE (book, author),
    CONSTRAINT books_authors_link_pkey PRIMARY KEY (id),
    CONSTRAINT fk_books_authors_link_author FOREIGN KEY (author) REFERENCES public.authors(id) ON DELETE CASCADE ON UPDATE RESTRICT,
    CONSTRAINT fk_books_authors_link_book FOREIGN KEY (book) REFERENCES public.books(id) ON DELETE CASCADE ON UPDATE RESTRICT
);
CREATE INDEX idx_books_authors_link_author ON public.books_authors_link USING btree (author);
CREATE INDEX idx_books_authors_link_book ON public.books_authors_link USING btree (book);


-- public.books_languages_link definition

-- Drop table

-- DROP TABLE public.books_languages_link;

CREATE TABLE public.books_languages_link (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    book int4 NOT NULL,
    lang_code int4 NOT NULL,
    item_order int4 NOT NULL,
    CONSTRAINT books_languages_link_book_lang_code_key UNIQUE (book, lang_code),
    CONSTRAINT books_languages_link_pkey PRIMARY KEY (id),
    CONSTRAINT fk_books_languages_link_book FOREIGN KEY (book) REFERENCES public.books(id) ON DELETE CASCADE ON UPDATE RESTRICT,
    CONSTRAINT fk_books_languages_link_lang_code FOREIGN KEY (lang_code) REFERENCES public.languages(id) ON DELETE CASCADE ON UPDATE RESTRICT
);
CREATE INDEX idx_books_languages_link_book ON public.books_languages_link USING btree (book);
CREATE INDEX idx_books_languages_link_lang_code ON public.books_languages_link USING btree (lang_code);


-- public.books_publishers_link definition

-- Drop table

-- DROP TABLE public.books_publishers_link;

CREATE TABLE public.books_publishers_link (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    book int4 NOT NULL,
    publisher int4 NOT NULL,
    CONSTRAINT books_publishers_link_book_key UNIQUE (book),
    CONSTRAINT books_publishers_link_pkey PRIMARY KEY (id),
    CONSTRAINT fk_books_publishers_link_book FOREIGN KEY (book) REFERENCES public.books(id) ON DELETE CASCADE ON UPDATE RESTRICT,
    CONSTRAINT fk_books_publishers_link_publisher FOREIGN KEY (publisher) REFERENCES public.publishers(id) ON DELETE CASCADE ON UPDATE RESTRICT
);
CREATE INDEX idx_books_publishers_link_book ON public.books_publishers_link USING btree (book);
CREATE INDEX idx_books_publishers_link_publisher ON public.books_publishers_link USING btree (publisher);


-- public.books_ratings_link definition

-- Drop table

-- DROP TABLE public.books_ratings_link;

CREATE TABLE public.books_ratings_link (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    book int4 NOT NULL,
    rating int4 NOT NULL,
    CONSTRAINT books_ratings_link_book_rating_key UNIQUE (book, rating),
    CONSTRAINT books_ratings_link_pkey PRIMARY KEY (id),
    CONSTRAINT fk_books_ratings_link_book FOREIGN KEY (book) REFERENCES public.books(id) ON DELETE CASCADE ON UPDATE RESTRICT,
    CONSTRAINT fk_books_ratings_link_rating FOREIGN KEY (rating) REFERENCES public.ratings(id) ON DELETE CASCADE ON UPDATE RESTRICT
);
CREATE INDEX idx_books_ratings_link_book ON public.books_ratings_link USING btree (book);
CREATE INDEX idx_books_ratings_link_rating ON public.books_ratings_link USING btree (rating);


-- public.books_series_link definition

-- Drop table

-- DROP TABLE public.books_series_link;

CREATE TABLE public.books_series_link (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    book int4 NOT NULL,
    series int4 NOT NULL,
    CONSTRAINT books_series_link_book_key UNIQUE (book),
    CONSTRAINT books_series_link_pkey PRIMARY KEY (id),
    CONSTRAINT fk_books_series_link_book FOREIGN KEY (book) REFERENCES public.books(id) ON DELETE CASCADE ON UPDATE RESTRICT,
    CONSTRAINT fk_books_series_link_series FOREIGN KEY (series) REFERENCES public.series(id) ON DELETE CASCADE ON UPDATE RESTRICT
);
CREATE INDEX idx_books_series_link_book ON public.books_series_link USING btree (book);
CREATE INDEX idx_books_series_link_series ON public.books_series_link USING btree (series);


-- public.books_tags_link definition

-- Drop table

-- DROP TABLE public.books_tags_link;

CREATE TABLE public.books_tags_link (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    book int4 NOT NULL,
    tag int4 NOT NULL,
    CONSTRAINT books_tags_link_book_tag_key UNIQUE (book, tag),
    CONSTRAINT books_tags_link_pkey PRIMARY KEY (id),
    CONSTRAINT fk_books_tags_link_book FOREIGN KEY (book) REFERENCES public.books(id) ON DELETE CASCADE ON UPDATE RESTRICT,
    CONSTRAINT fk_books_tags_link_tag FOREIGN KEY (tag) REFERENCES public.tags(id) ON DELETE CASCADE ON UPDATE RESTRICT
);
CREATE INDEX idx_books_tags_link_book ON public.books_tags_link USING btree (book);
CREATE INDEX idx_books_tags_link_tag ON public.books_tags_link USING btree (tag);


-- public.user_roles definition

-- Drop table

-- DROP TABLE public.user_roles;

CREATE TABLE public.user_roles (
    user_id int4 NULL,
    role_id int4 NULL,
    CONSTRAINT fk_user_roles_roles FOREIGN KEY (role_id) REFERENCES public.roles(id) ON DELETE CASCADE ON UPDATE RESTRICT,
    CONSTRAINT fk_user_roles_user FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE ON UPDATE RESTRICT
);
